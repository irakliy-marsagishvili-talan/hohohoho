<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="1.47" tests="38" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\IrakliyMarsagishvili\OneDrive - talan.com\Desktop\Microservices bootcamp\Bootcamp Projects\hohohoho\target\test-classes;C:\Users\IrakliyMarsagishvili\OneDrive - talan.com\Desktop\Microservices bootcamp\Bootcamp Projects\hohohoho\target\classes;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.5.3\spring-boot-starter-web-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.3\spring-boot-starter-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot\3.5.3\spring-boot-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.3\spring-boot-autoconfigure-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.3\spring-boot-starter-logging-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.5.3\spring-boot-starter-json-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.19.1\jackson-databind-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.19.1\jackson-annotations-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.19.1\jackson-core-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.19.1\jackson-datatype-jdk8-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.19.1\jackson-datatype-jsr310-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.19.1\jackson-module-parameter-names-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.5.3\spring-boot-starter-tomcat-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.42\tomcat-embed-core-10.1.42.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.42\tomcat-embed-websocket-10.1.42.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-web\6.2.8\spring-web-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-beans\6.2.8\spring-beans-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\micrometer\micrometer-observation\1.15.1\micrometer-observation-1.15.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\micrometer\micrometer-commons\1.15.1\micrometer-commons-1.15.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-webmvc\6.2.8\spring-webmvc-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-aop\6.2.8\spring-aop-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-context\6.2.8\spring-context-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-expression\6.2.8\spring-expression-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.5.3\spring-boot-starter-data-jpa-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.5.3\spring-boot-starter-jdbc-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\zaxxer\HikariCP\6.3.0\HikariCP-6.3.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-jdbc\6.2.8\spring-jdbc-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hibernate\orm\hibernate-core\6.6.18.Final\hibernate-core-6.6.18.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\data\spring-data-jpa\3.5.1\spring-data-jpa-3.5.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\data\spring-data-commons\3.5.1\spring-data-commons-3.5.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-orm\6.2.8\spring-orm-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-tx\6.2.8\spring-tx-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-aspects\6.2.8\spring-aspects-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.5.3\spring-boot-starter-validation-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.42\tomcat-embed-el-10.1.42.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.2.Final\hibernate-validator-8.0.2.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\h2database\h2\2.3.232\h2-2.3.232.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.5.3\spring-boot-starter-test-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-test\3.5.3\spring-boot-test-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.5.3\spring-boot-test-autoconfigure-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hamcrest\hamcrest\3.0\hamcrest-3.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter\5.12.2\junit-jupiter-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.12.2\junit-jupiter-params-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.12.2\junit-jupiter-engine-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\platform\junit-platform-engine\1.12.2\junit-platform-engine-1.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-core\6.2.8\spring-core-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-jcl\6.2.8\spring-jcl-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-test\6.2.8\spring-test-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\xmlunit\xmlunit-core\2.10.2\xmlunit-core-2.10.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\assertj\assertj-core\3.27.3\assertj-core-3.27.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\bytebuddy\byte-buddy\1.17.6\byte-buddy-1.17.6.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\mockito\mockito-core\5.17.0\mockito-core-5.17.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\bytebuddy\byte-buddy-agent\1.17.6\byte-buddy-agent-1.17.6.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\mockito\mockito-junit-jupiter\5.17.0\mockito-junit-jupiter-5.17.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.12.2\junit-jupiter-api-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\platform\junit-platform-commons\1.12.2\junit-platform-commons-1.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\rest-assured\5.5.5\rest-assured-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\groovy\groovy\4.0.27\groovy-4.0.27.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\groovy\groovy-xml\4.0.27\groovy-xml-4.0.27.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\httpcomponents\httpcore\4.4.16\httpcore-4.4.16.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\commons-codec\commons-codec\1.18.0\commons-codec-1.18.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\httpcomponents\httpmime\4.5.13\httpmime-4.5.13.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\json-path\5.5.5\json-path-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\groovy\groovy-json\4.0.27\groovy-json-4.0.27.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\rest-assured-common\5.5.5\rest-assured-common-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\xml-path\5.5.5\xml-path-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="catalina.useNaming" value="false"/>
    <property name="user.timezone" value="Europe/Madrid"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="user.country.format" value="NL"/>
    <property name="os.name" value="Windows 10"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="APPLICATION_NAME" value="demoservice"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-21\bin"/>
    <property name="sun.java.command" value="C:\Users\IrakliyMarsagishvili\AppData\Local\Temp\surefire9256014073350986589\surefirebooter-20250721110714619_3.jar C:\Users\IrakliyMarsagishvili\AppData\Local\Temp\surefire9256014073350986589 2025-07-21T11-07-14_418-jvmRun1 surefire-20250721110714619_1tmp surefire_0-20250721110714619_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\IrakliyMarsagishvili\OneDrive - talan.com\Desktop\Microservices bootcamp\Bootcamp Projects\hohohoho\target\test-classes;C:\Users\IrakliyMarsagishvili\OneDrive - talan.com\Desktop\Microservices bootcamp\Bootcamp Projects\hohohoho\target\classes;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.5.3\spring-boot-starter-web-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.3\spring-boot-starter-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot\3.5.3\spring-boot-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.3\spring-boot-autoconfigure-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.3\spring-boot-starter-logging-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.5.3\spring-boot-starter-json-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.19.1\jackson-databind-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.19.1\jackson-annotations-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.19.1\jackson-core-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.19.1\jackson-datatype-jdk8-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.19.1\jackson-datatype-jsr310-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.19.1\jackson-module-parameter-names-2.19.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.5.3\spring-boot-starter-tomcat-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.42\tomcat-embed-core-10.1.42.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.42\tomcat-embed-websocket-10.1.42.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-web\6.2.8\spring-web-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-beans\6.2.8\spring-beans-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\micrometer\micrometer-observation\1.15.1\micrometer-observation-1.15.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\micrometer\micrometer-commons\1.15.1\micrometer-commons-1.15.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-webmvc\6.2.8\spring-webmvc-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-aop\6.2.8\spring-aop-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-context\6.2.8\spring-context-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-expression\6.2.8\spring-expression-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.5.3\spring-boot-starter-data-jpa-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.5.3\spring-boot-starter-jdbc-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\zaxxer\HikariCP\6.3.0\HikariCP-6.3.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-jdbc\6.2.8\spring-jdbc-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hibernate\orm\hibernate-core\6.6.18.Final\hibernate-core-6.6.18.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\data\spring-data-jpa\3.5.1\spring-data-jpa-3.5.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\data\spring-data-commons\3.5.1\spring-data-commons-3.5.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-orm\6.2.8\spring-orm-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-tx\6.2.8\spring-tx-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-aspects\6.2.8\spring-aspects-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.5.3\spring-boot-starter-validation-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.42\tomcat-embed-el-10.1.42.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.2.Final\hibernate-validator-8.0.2.Final.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\h2database\h2\2.3.232\h2-2.3.232.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.5.3\spring-boot-starter-test-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-test\3.5.3\spring-boot-test-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.5.3\spring-boot-test-autoconfigure-3.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\hamcrest\hamcrest\3.0\hamcrest-3.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter\5.12.2\junit-jupiter-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.12.2\junit-jupiter-params-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.12.2\junit-jupiter-engine-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\platform\junit-platform-engine\1.12.2\junit-platform-engine-1.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-core\6.2.8\spring-core-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-jcl\6.2.8\spring-jcl-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\springframework\spring-test\6.2.8\spring-test-6.2.8.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\xmlunit\xmlunit-core\2.10.2\xmlunit-core-2.10.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\assertj\assertj-core\3.27.3\assertj-core-3.27.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\bytebuddy\byte-buddy\1.17.6\byte-buddy-1.17.6.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\mockito\mockito-core\5.17.0\mockito-core-5.17.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\net\bytebuddy\byte-buddy-agent\1.17.6\byte-buddy-agent-1.17.6.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\mockito\mockito-junit-jupiter\5.17.0\mockito-junit-jupiter-5.17.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.12.2\junit-jupiter-api-5.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\junit\platform\junit-platform-commons\1.12.2\junit-platform-commons-1.12.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\rest-assured\5.5.5\rest-assured-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\groovy\groovy\4.0.27\groovy-4.0.27.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\groovy\groovy-xml\4.0.27\groovy-xml-4.0.27.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\httpcomponents\httpcore\4.4.16\httpcore-4.4.16.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\commons-codec\commons-codec\1.18.0\commons-codec-1.18.0.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\httpcomponents\httpmime\4.5.13\httpmime-4.5.13.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\json-path\5.5.5\json-path-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\groovy\groovy-json\4.0.27\groovy-json-4.0.27.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\rest-assured-common\5.5.5\rest-assured-common-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\io\rest-assured\xml-path\5.5.5\xml-path-5.5.5.jar;C:\Users\IrakliyMarsagishvili\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\IrakliyMarsagishvili"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-21"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\IrakliyMarsagishvili\OneDrive - talan.com\Desktop\Microservices bootcamp\Bootcamp Projects\hohohoho"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\IrakliyMarsagishvili\AppData\Local\Temp\surefire9256014073350986589\surefirebooter-20250721110714619_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.7+8-LTS-245"/>
    <property name="user.name" value="IrakliyMarsagishvili"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\IrakliyMarsagishvili\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\IRAKLI~1\AppData\Local\Temp\"/>
    <property name="com.zaxxer.hikari.pool_number" value="2"/>
    <property name="catalina.home" value="C:\Users\IrakliyMarsagishvili\AppData\Local\Temp\tomcat.0.9385456215449580243"/>
    <property name="java.version" value="21.0.7"/>
    <property name="user.dir" value="C:\Users\IrakliyMarsagishvili\OneDrive - talan.com\Desktop\Microservices bootcamp\Bootcamp Projects\hohohoho"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="24292"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="catalina.base" value="C:\Users\IrakliyMarsagishvili\AppData\Local\Temp\tomcat.0.9385456215449580243"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-21\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Java\jdk-21\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\Spring Boot\spring-3.5.0\bin;C:\Program Files\Maven\apache-maven-3.9.10\bin;C:\Users\IrakliyMarsagishvili\AppData\Local\Microsoft\WindowsApps;C:\Users\IrakliyMarsagishvili\AppData\Local\Programs\Git\cmd;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="21.0.7+8-LTS-245"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[demoservice] "/>
  </properties>
  <testcase name="shouldFindBooksWithStockGreaterThan" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.263">
    <system-out><![CDATA[2025-07-21T11:07:43.711+02:00  INFO 24292 --- [demoservice] [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.talant.bootcamp.booksservice.repository.BookRepositoryTest]: BookRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-07-21T11:07:43.734+02:00  INFO 24292 --- [demoservice] [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.talant.bootcamp.booksservice.BooksserviceApplication for test class com.talant.bootcamp.booksservice.repository.BookRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.3)

2025-07-21T11:07:43.765+02:00  INFO 24292 --- [demoservice] [           main] c.t.b.b.repository.BookRepositoryTest    : Starting BookRepositoryTest using Java 21.0.7 with PID 24292 (started by IrakliyMarsagishvili in C:\Users\IrakliyMarsagishvili\OneDrive - talan.com\Desktop\Microservices bootcamp\Bootcamp Projects\hohohoho)
2025-07-21T11:07:43.765+02:00  INFO 24292 --- [demoservice] [           main] c.t.b.b.repository.BookRepositoryTest    : The following 1 profile is active: "test"
2025-07-21T11:07:43.865+02:00  INFO 24292 --- [demoservice] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-21T11:07:43.881+02:00  INFO 24292 --- [demoservice] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10 ms. Found 1 JPA repository interface.
2025-07-21T11:07:43.897+02:00  INFO 24292 --- [demoservice] [           main] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2025-07-21T11:07:43.916+02:00  INFO 24292 --- [demoservice] [           main] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:1b297787-782f-41e7-ad10-17c6402df366;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2025-07-21T11:07:43.934+02:00  INFO 24292 --- [demoservice] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-21T11:07:43.950+02:00  INFO 24292 --- [demoservice] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-07-21T11:07:43.950+02:00  INFO 24292 --- [demoservice] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-21T11:07:43.950+02:00  WARN 24292 --- [demoservice] [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-21T11:07:43.950+02:00  INFO 24292 --- [demoservice] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy@31becdf5']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-21T11:07:43.981+02:00  INFO 24292 --- [demoservice] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: drop table if exists books cascade 
Hibernate: create table books (price numeric(10,2) not null, stock integer not null check ((stock<=999999) and (stock>=0)), created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), description varchar(1000), author varchar(255) not null, isbn varchar(255) not null unique, title varchar(255) not null, category enum ('ACADEMIC','BIOGRAPHY','BUSINESS','CHILDREN','COOKING','FANTASY','FICTION','HISTORY','MYSTERY','NON_FICTION','OTHER','REFERENCE','ROMANCE','SCIENCE','SCIENCE_FICTION','SELF_HELP','TECHNOLOGY','THRILLER','TRAVEL','YOUNG_ADULT') not null, primary key (id))
2025-07-21T11:07:43.981+02:00  INFO 24292 --- [demoservice] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-21T11:07:44.021+02:00  INFO 24292 --- [demoservice] [           main] c.t.b.b.repository.BookRepositoryTest    : Started BookRepositoryTest in 0.272 seconds (process running for 29.229)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.stock>?
]]></system-out>
  </testcase>
  <testcase name="shouldHandleCaseInsensitiveSearchWithSpecialCharacters" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.02">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksByCategory" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.018">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.category=?
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksWithSpecificStock" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.031">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.stock=?
]]></system-out>
  </testcase>
  <testcase name="shouldUpdateBook" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.016">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldCountBooksByCategory" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.025">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.category,count(b1_0.id) from books b1_0 group by b1_0.category
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksByAuthor" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.028">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where upper(b1_0.author) like upper(?) escape '\'
]]></system-out>
  </testcase>
  <testcase name="shouldFindMultipleBooksByPartialAuthor" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.031">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where upper(b1_0.author) like upper(?) escape '\'
]]></system-out>
  </testcase>
  <testcase name="shouldDeleteAllBooks" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.051">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: delete from books where id=?
Hibernate: delete from books where id=?
Hibernate: delete from books where id=?
Hibernate: delete from books where id=?
Hibernate: delete from books where id=?
Hibernate: delete from books where id=?
Hibernate: select count(*) from books b1_0
]]></system-out>
  </testcase>
  <testcase name="shouldDeleteBookById" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.018">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksByAuthorAndCategory" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.015">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksByTitle" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.032">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where upper(b1_0.title) like upper(?) escape '\'
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksWithLowStock" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.015">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldCheckIfBookExistsByIsbn" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.0">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFlushChangesToDatabase" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.027">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindAllBooksOrderedByAuthorAsc" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.016">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldSearchBooksByTitleOrAuthor" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.031">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksWithPriceLessThanOrEqualTo" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.021">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindAllBooks" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.017">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
]]></system-out>
  </testcase>
  <testcase name="shouldFindBookByIsbn" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.015">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.isbn=?
]]></system-out>
  </testcase>
  <testcase name="shouldHandleEmptySearchResults" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.032">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where lower(b1_0.title) like lower(('%'||?||'%')) escape '' or lower(b1_0.author) like lower(('%'||?||'%')) escape ''
]]></system-out>
  </testcase>
  <testcase name="shouldFindAllBooksOrderedByPriceDesc" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.01">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldCheckIfBookExistsById" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.027">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindAllBooksOrderedByTitleAsc" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.033">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 order by b1_0.title
]]></system-out>
  </testcase>
  <testcase name="shouldSaveMultipleBooks" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.015">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select count(*) from books b1_0
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksByPriceRange" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.031">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.price between ? and ?
]]></system-out>
  </testcase>
  <testcase name="shouldSearchBooksByTextInTitle" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.017">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldDeleteBook" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.016">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldDeleteAllBooksInBatch" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.016">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldSaveAndFindBookById" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.031">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldFindAllBooksOrderedByPriceAsc" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.01">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 order by b1_0.price
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksWithPriceGreaterThanOrEqualTo" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.027">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldHandlePriceBoundaryConditions" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.017">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.price between ? and ?
]]></system-out>
  </testcase>
  <testcase name="shouldHandleStockBoundaryConditions" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.016">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.stock>?
]]></system-out>
  </testcase>
  <testcase name="shouldReturnEmptyWhenIsbnNotFound" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.031">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0 where b1_0.isbn=?
]]></system-out>
  </testcase>
  <testcase name="shouldFindBooksByTitleAndAuthor" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.02">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="shouldGetAveragePriceByCategory" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.016">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select b1_0.category,avg(b1_0.price) from books b1_0 group by b1_0.category
]]></system-out>
  </testcase>
  <testcase name="shouldCountTotalBooks" classname="com.talant.bootcamp.booksservice.repository.BookRepositoryTest" time="0.031">
    <system-out><![CDATA[Hibernate: select b1_0.id,b1_0.author,b1_0.category,b1_0.created_at,b1_0.description,b1_0.isbn,b1_0.price,b1_0.stock,b1_0.title,b1_0.updated_at from books b1_0
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into books (author,category,created_at,description,isbn,price,stock,title,updated_at,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: select count(*) from books b1_0
]]></system-out>
  </testcase>
</testsuite>